# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- main

pool:
  vmImage: ubuntu-latest

variables:
  workingDirectory: '$(System.DefaultWorkingDirectory)/'
  vmImageName: 'ubuntu-latest'

stages:
- stage: Test
  displayName: Code Tests
  jobs:
    - job: Test
      displayName: Code Tests
      pool:
        vmImage: $(vmImageName)
      steps:
        - task: UsePythonVersion@0
          inputs:
            versionSpec: 3.8
            addToPath: true
            architecture: x64

        - bash: |
            pip install pytest
            pip install pytest-cov
            pip install faker
          workingDirectory: $(workingDirectory)
          displayName: Install pytest

        - bash: |
            pip install -r requirements.txt
          workingDirectory: $(workingDirectory)
          displayName: Install project requirements for tests

        - bash: |
            pytest tests --doctest-modules --junitxml=junit/test-results.xml --cov=. --cov-report=xml --cov-report=html
          workingDirectory: $(workingDirectory)
          displayName: Test with pytest

        - task: PublishTestResults@2
          condition: succeededOrFailed()
          inputs:
            testResultsFiles: '**/test-*.xml'
            testRunTitle: 'Publish test resutls for Python $(python.version)'

        - task: PublishCodeCoverageResults@1
          inputs:
            codeCoverageTool: Cobertura
            summaryFileLocation: '$(workingDirectory)/**/coverage.xml'

- stage: Build
  displayName: Build stage

  jobs:
  - job: Build
    displayName: Build
    pool:
      vmImage: $(vmImageName)

    steps:
    - task: ArchiveFiles@2
      displayName: 'Archive files'
      inputs:
        rootFolderOrFile: '$(workingDirectory)the_code'
        includeRootFolder: false
        archiveType: zip
        archiveFile: $(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip
        replaceExistingArchive: true

    - publish: $(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip
      artifact: drop

- stage: Deploy
  displayName: Deployment
  dependsOn: Build
  condition: succeeded()
  jobs:
  - deployment: Deploy
    displayName: Deploy
    environment:
      name: Development
      resourceType: VirtualMachine
      tags: lhit11vms
    strategy:
     runOnce:
        preDeploy:
          steps:
            - bash: |
                echo "preDeploy phase"
                python3 -m pip install virtualenv --user
        deploy:
          steps:
          - bash: |
              echo "deploy phase"
        on:
          failure:
            steps:
            - bash: |
                echo "failed"
          success:
            steps:
            - bash: |
                echo "success"
          
# - stage: Deploy
#   displayName: Deploy stage
#   dependsOn: Build
#   condition: succeeded()
#
#   jobs:
#   - deployment: Deploy
#     displayName: Deploy
#     environment:
#       name: Development
#       resourceType: VirtualMachine
#       tags: lhit11vms
#
#     strategy:
#       runOnce:
#         deploy:
#           steps:
#           - task:
#
#               package: '$(Pipeline.Workspace)/drop/$(Build.BuildId).zip'
